if(!file.exists("ofsted.csv")){download.file(url = "https://www.gov.uk/government/statistics/maintained-schools-and-academies-inspections-and-outcomes-sep-2014-to-aug-2015", destfile = "ofsted.csv", method = curl)}
if(!file.exists("ofsted.csv")){download.file(url = "https://www.gov.uk/government/statistics/maintained-schools-and-academies-inspections-and-outcomes-sep-2014-to-aug-2015", destfile = "ofsted.csv", method = "curl")}
ks4url <- "http://www.education.gov.uk/schools/performance/download/xls/england_ks4.zip"
if(!file.exists("ks4.csv")){download.file(url = ks4url, destfile = "ks4.zip", method = "curl")}
?unzip
unzip("ks4.zip")
ofsted <- read.csv("ofsted.csv")
View(ofsted)
ofstedurl <- "https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/483703/School_inspection_data_provisional_2.xlsx"
if(!file.exists("ofsted.csv")){download.file(url = ofstedurl, destfile = "ofsted.csv", method = "curl")}
ofsted <- read.csv("ofsted.csv")
if(!file.exists("ofsted.xlsx")){download.file(url = ofstedurl, destfile = "ofsted.xlsx", method = "curl")}
ofsted <- read.xlsx("ofsted.xlsx")
# Load in the datasets
library(openxlsx)
ofsted <- read.xlsx(xlsxFile = "ofsted.xlsx", sheet = 2, colNames = TRUE)
View(ofsted)
# Load in the ofsted dataset
library(pacman) # package manager library
p_load(openxlsx)
p_load(dplyr)
names(ofsted)
?select
head(ofsted)
myofsted <- dplyr::select(ofsted, URN, LAESTAB, Region, Type.of.establishment, Total.number.of.pupils, Overall.effectiveness)
myofsted <- dplyr::select(ofsted, URN, LAESTAB, Region, Type.of.establishment, Total.number.of.pupils, Overall.effectiveness:.how.good.is.the.school)
myofsted <- dplyr::select(ofsted, URN, LAESTAB, Region, Type.of.establishment, Total.number.of.pupils, "Overall.effectiveness:.how.good.is.the.school")
myofsted <- dplyr::select(ofsted, URN, LAESTAB, Region, Type.of.establishment, Total.number.of.pupils, "Overall.effectiveness:.how.good.is.the.school")
View(ofsted)
myofsted <- dplyr::select(ofsted, URN, LAESTAB, Region, Type.of.establishment, Total.number.of.pupils, "Overall.effectiveness:.how.good.is.the.school")
myofsted <- dplyr::select(ofsted, URN, LAESTAB, Region, Type.of.establishment, Total.number.of.pupils, "Overall.effectiveness\:.how.good.is.the.school")
ofstedvars <- c("URN", "LAESTAB", "Region", "Type.of.establishment", "Total.number.of.pupils", "Overall.effectiveness:.how.good.is.the.school")
myofsted <- dplyr::select(ofsted, one_of(ofstedvars))
myofstednames <- c("urn", "laestab", "region", "instype", "totpups", "ofstedgrade")
names(myofsted) <- myofstednames
names(myofsted)
lapply(myofsted, class)
myofsted$instype <- factor(myofsted$instype)
table(myofsted$instype)
p_load(car) # for recoding
install.packages(c("ggplot2", "gridExtra", "Matrix", "mgcv", "nlme", "pbapply", "RcppEigen", "RCurl", "XML"))
p_load(car) # for recoding
p_unload(car)
p_load(plyr) # for recoding
levels(myofsted$instype)
?mapvalues
myofsted$schooltype <- mapvalues(myofsted$instype,
from = c(levels(myofsted$instype)[1:5]),
to = c(rep("Academy", 5))
)
table(myofsted$instype, myofsted$schooltype)
myofsted$schooltype <- mapvalues(myofsted$instype,
from = c(levels(myofsted$instype)[1:5],
levels(myofsted$instype)[6],
levels(myofsted$instype)[7:8],
levels(myofsted$instype)[9:10],
levels(myofsted$instype)[11:13],
levels(myofsted$instype)[14:18],
levels(myofsted$instype)[19],
levels(myofsted$instype)[20]),
to = c(rep("Academy", 5),
"Other",
"Community",
"Foundation",
rep("Academy", 3),
"Other",
"Voluntary Aided",
"Voluntary Controlled")
)
rep("Other", 5),
myofsted$schooltype <- mapvalues(myofsted$instype,
from = c(levels(myofsted$instype)[1:5],
levels(myofsted$instype)[6],
levels(myofsted$instype)[7:8],
levels(myofsted$instype)[9:10],
levels(myofsted$instype)[11:13],
levels(myofsted$instype)[14:18],
levels(myofsted$instype)[19],
levels(myofsted$instype)[20]),
to = c(rep("Academy", 5),
"Other",
rep("Community", 2),
rep("Foundation", 2),
rep("Academy", 3),
rep("Other", 5),
"Voluntary Aided",
"Voluntary Controlled")
)
table(myofsted$instype, myofsted$schooltype)
myofsted$ofstedgradef <- factor(myofsted$ofstedgrade, levels = c(1,2,3,4), labels = "Outstanding", "Good", "Requires Improvement", "Inadequate")
myofsted$ofstedgradef <- factor(myofsted$ofstedgrade, levels = c("1","2","3","4"), labels = "Outstanding", "Good", "Requires Improvement", "Inadequate")
myofsted$ofstedgradef <- factor(myofsted$ofstedgrade, levels = c(1,2,3,4), labels = c("Outstanding", "Good", "Requires Improvement", "Inadequate"))
table(myofsted$ofstedgradef)
myofsted$instype <- mapvalues(myofsted$instype,
from = c(levels(myofsted$instype)[1:5],
levels(myofsted$instype)[6],
levels(myofsted$instype)[7:8],
levels(myofsted$instype)[9:10],
levels(myofsted$instype)[11:13],
levels(myofsted$instype)[14:18],
levels(myofsted$instype)[19],
levels(myofsted$instype)[20]),
to = c(rep("Academy", 5),
"Other",
rep("Community", 2),
rep("Foundation", 2),
rep("Academy", 3),
rep("Other", 5),
"Voluntary Aided",
"Voluntary Controlled")
)
myofsted$ofstedgrade <- factor(myofsted$ofstedgrade, levels = c(1,2,3,4), labels = c("Outstanding", "Good", "Requires Improvement", "Inadequate"))
myofsted$schooltype <- NULL
myofsted$ofstedgradef  <- NULL
?read.xlsx
# Load in the first 26 columns of the KS4 dataset
ks4 <- read.xlsx(xlsxFile = "ks4.xlsx", sheet = 1, colNames = TRUE, cols = c(1:27, 96))
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, cols = c(1:27, 96))
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, cols = c(1:27))
p_load(openxlsx)
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, cols = c(1:27, 96))
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, cols = c(1:27))
# Load in the first 26 columns of the KS4 dataset
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, startRow = 2, cols = c(1:27, 96))
# Load in the first 26 columns of the KS4 dataset
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, startRow = 2, cols = c(3,4,5,16,17,18,19,27,96))
p_unload(openxlsx)
p_load(openxlsx)
# Load in the first 26 columns of the KS4 dataset
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, startRow = 2, cols = c(3,4,5,16,17,18,19,27,96))
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, startRow = 2)
rea.xlsx.default
read.xlsx.default
read.xlsx
getMethod("read.xlsx")
# Load in the first 26 columns of the KS4 dataset
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, startRow = 2, cols = c(3,4,5,16,17,18,19,27,96))
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, startRow = 2, cols = as.numeric(c(3,4,5,16,17,18,19,27,96)))
# Load in the first 26 columns of the KS4 dataset
ks4 <- read.xlsx(xlsxFile = "england_ks4.xlsx", sheet = 1, colNames = TRUE, startRow = 2, cols = c(3,4,5,16,17,18,19,27,96))
shiny::runApp('Ofsted_App')
library(shiny)
library(knitr)
library(caret)
# Set working directory for testing
setwd("~/GitHub/Ofsted_Prediction/Ofsted_App")
# load up the ofsted data
schools <- read.csv("schools.csv")
# make an empty dataframe for the user
userdf <- schools[1,]
set.seed(13489) # set the seed at each interation, and keep them across model fits
seeds <- vector(mode = "list", length = 26)
for(i in 1:25) seeds[[i]] <- sample.int(1000, 22)
#for the last model:
seeds[[26]] <- sample.int(1000, 1)
# put the trainControl options into an object for ease - make sure allowParallel is set to true
trctrl <- trainControl(method = "cv",
number = 5,
seeds = seeds,
allowParallel = TRUE)
# set up parallel processing in caret before estimating models
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
# build Classification Tree model using rpart
set.seed(13489)
modelrpart <- train(ofstedgrade ~ ., data = schools, method = "rpart", trControl = trctrl)
# build Linear Discriminant Analysis model using lda
set.seed(13489)
modellda <- train(ofstedgrade ~ ., data = schools, method = "lda", trControl = trctrl)
# build Naive Bayes model using nb
set.seed(13489)
modelnb <- train(ofstedgrade ~ ., data = schools, method = "nb", trControl = trctrl)
# build SVM Radial Kernal model using svmRadial
set.seed(13489)
modelsvmradial <- train(ofstedgrade ~ ., data = schools, method = "svmRadial", trControl = trctrl)
# stop the parallel processing
stopCluster(cluster)
runApp()
runApp()
